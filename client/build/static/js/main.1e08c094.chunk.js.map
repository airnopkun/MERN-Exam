{"version":3,"sources":["components/PetList/PetList.js","components/Header/Header.js","views/Main.js","components/DeleteButton/DeleteButton.js","views/Detail.js","components/PetForm/PetForm.js","views/Update.js","views/Create.js","App.js","serviceWorker.js","index.js"],"names":["props","removeFromDom","pets","map","pet","idx","name","type","to","_id","key","useState","source","id","setPets","loaded","setLoaded","useEffect","axios","get","then","res","data","PetList","petID","filter","petId","successCallback","onClick","e","delete","console","log","setPet","className","description","skills","skill","DeleteButton","petName","navigate","initialSettingsProp","onSubmitProp","setName","setType","setDescription","setSkills","onSkillsInputChange","tempSkills","target","value","onSubmit","preventDefault","onChange","step","errors","setErrors","err","put","catch","errorResponse","response","errorArr","Object","keys","push","message","post","App","path","Create","Update","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"2VAGe,WAACA,GACcA,EAAlBC,cACR,OACI,+BACI,+BACI,4BACI,oCACA,oCACA,yCAGR,+BACKD,EAAME,KAAKC,KAAI,SAACC,EAAKC,GACd,OACI,4BACI,4BAAKD,EAAIE,MACT,4BAAKF,EAAIG,MACT,4BACI,kBAAC,IAAD,CAAMC,GAAE,gBAAWJ,EAAIK,KAAOC,IAAKL,GAAnC,YACA,kBAAC,IAAD,CAAMG,GAAE,qBAAgBJ,EAAIK,MAA5B,QACA,qCCnBrB,G,MAAA,SAACT,GAAW,IAAD,EACMW,mBAASX,EAAMY,QADrB,mBACfA,EADe,UAEtB,OACI,yBAAKC,GAAI,UACL,2CACY,SAAXD,EACK,kBAAC,IAAD,CAAMJ,GAAI,aAAV,4BACA,kBAAC,IAAD,CAAMA,GAAI,KAAV,mBCLH,G,MAAA,WAAO,IAAD,EACOG,mBAAS,IADhB,mBACVT,EADU,KACJY,EADI,OAEWH,oBAAS,GAFpB,mBAEVI,EAFU,KAEFC,EAFE,KAIjBC,qBAAU,WACNC,IAAMC,IAAI,kCACLC,MAAK,SAAAC,GACFP,EAAQO,EAAIC,KAAKpB,MACjBc,GAAU,QAEnB,IAMH,OACI,yBAAKH,GAAI,QACL,kBAAC,EAAD,CAAQD,OAAQ,SAChB,yBAAKC,GAAI,WACJE,GAAU,kBAACQ,EAAD,CAASrB,KAAMA,EAAMD,cARtB,SAAAuB,GAClBV,EAAQZ,EAAKuB,QAAO,SAAArB,GAAG,OAAIA,EAAIK,MAAQe,aChBhC,WAAAxB,GAAU,IACb0B,EAA2B1B,EAA3B0B,MAAOC,EAAoB3B,EAApB2B,gBAQf,OACI,4BAAQC,QARM,SAAAC,GACdX,IAAMY,OAAN,yCAA+CJ,IAC1CN,MAAK,SAAAC,GACFU,QAAQC,IAAIX,GACZM,SAIR,cCNO,G,MAAA,SAAC3B,GAAW,IAAD,EACAW,mBAAS,IADT,mBACfP,EADe,KACV6B,EADU,OAEMtB,oBAAS,GAFf,mBAEfI,EAFe,KAEPC,EAFO,KAUtB,OAPAC,qBAAU,WACNC,IAAMC,IAAN,yCAA4CnB,EAAMa,KAC7CO,MAAK,SAAAC,GACFY,EAAOZ,EAAIC,MACXN,GAAU,QAEnB,IAEC,6BACI,kBAAC,EAAD,CAAQJ,OAAQ,WAChB,8CAAoBR,EAAIE,MACxB,yBAAKO,GAAI,mBACL,yBAAKA,GAAI,oBACL,yBAAKqB,UAAW,YAAarB,GAAI,kBAC7B,uBAAGqB,UAAW,WAAd,cACA,uBAAGA,UAAW,WAAY9B,EAAIG,OAElC,yBAAK2B,UAAW,YAAarB,GAAI,yBAC7B,uBAAGqB,UAAW,WAAd,iBACA,uBAAGA,UAAW,WAAY9B,EAAI+B,cAElC,yBAAKD,UAAW,YAAarB,GAAI,oBAC7B,uBAAGqB,UAAW,WAAd,YACA,yBAAKA,UAAW,WACXnB,GAAUX,EAAIgC,OAAOjC,KAAI,SAACkC,EAAOhC,GAC9B,OACI,uBAAGK,IAAKL,GAAMgC,UAQtC,kBAAC,IAAD,CAAM7B,GAAE,qBAAgBJ,EAAIK,MAA5B,QAGA,6BACA,kBAAC6B,EAAD,CAAcC,QAASnC,EAAIE,KAAMoB,MAAOtB,EAAIK,IAAKkB,gBAAiB,kBAAMa,YAAS,W,OC7C9E,G,MAAA,SAACxC,GAAW,IACfyC,EAAsCzC,EAAtCyC,oBAAqBC,EAAiB1C,EAAjB0C,aADP,EAEE/B,mBAAS8B,EAAoBnC,MAF/B,mBAEfA,EAFe,KAETqC,EAFS,OAGEhC,mBAAS8B,EAAoBlC,MAH/B,mBAGfA,EAHe,KAGTqC,EAHS,OAIgBjC,mBAAS8B,EAAoBN,aAJ7C,mBAIfA,EAJe,KAIFU,EAJE,OAKMlC,mBAAS8B,EAAoBL,QALnC,mBAKfA,EALe,KAKPU,EALO,KAYhBC,EAAsB,SAAClB,EAAGxB,GAC5B,IAAI2C,EAAU,YAAOZ,GACrBY,EAAW3C,GAAOwB,EAAEoB,OAAOC,MAC3BJ,EAAUE,IAGd,OACI,0BAAMG,SAZc,SAAAtB,GACpBA,EAAEuB,iBACFV,EAAa,CAACpC,OAAMC,OAAM4B,cAAaC,aAWnC,yBAAKvB,GAAI,UACL,yBAAKqB,UAAW,UACZ,uBAAGrB,GAAI,oBACH,uCAAmB,6BACnB,2BAAON,KAAK,OAAO8C,SAAY,SAACxB,GAAD,OAAOc,EAAQd,EAAEoB,OAAOC,QAAQA,MAAO5C,KAE1E,2BACI,uCAAmB,6BACnB,2BAAOC,KAAK,OAAO+C,KAAK,MAAMD,SAAY,SAACxB,GAAD,OAAOe,EAAQf,EAAEoB,OAAOC,QAAQA,MAAO3C,KAErF,2BACI,8CAA0B,6BAC1B,2BAAOA,KAAK,OAAO8C,SAAU,SAACxB,GAAD,OAAOgB,EAAehB,EAAEoB,OAAOC,QAAQA,MAAOf,MAGnF,yBAAKD,UAAW,SAAUrB,GAAI,oBAC1B,gDACA,2BACI,2CAAuB,6BACvB,2BAAON,KAAK,OAAO8C,SAAU,SAACxB,GAAD,OAAOkB,EAAoBlB,EAAG,IAAIqB,MAAOd,EAAO,MAEjF,2BACI,2CAAuB,6BACvB,2BAAO7B,KAAK,OAAO8C,SAAU,SAACxB,GAAD,OAAOkB,EAAoBlB,EAAG,IAAIqB,MAAOd,EAAO,MAEjF,2BACI,2CAAuB,6BACvB,2BAAO7B,KAAK,OAAO8C,SAAU,SAACxB,GAAD,OAAOkB,EAAoBlB,EAAG,IAAIqB,MAAOd,EAAO,QAIzF,2BAAO7B,KAAK,cChDT,WAAAP,GAAU,IACba,EAAOb,EAAPa,GADY,EAEEF,qBAFF,mBAEbP,EAFa,KAER6B,EAFQ,OAGQtB,oBAAS,GAHjB,mBAGbI,EAHa,KAGLC,EAHK,OAIQL,mBAAS,IAJjB,mBAIb4C,EAJa,KAILC,EAJK,KAMpBvC,qBAAU,WACNC,IAAMC,IAAN,yCAA4CN,IACvCO,MAAK,SAAAC,GACFY,EAAOZ,EAAIC,MACXN,GAAU,QAEnB,IAeH,OACI,oCACI,kBAAC,EAAD,CAAQJ,OAAQ,WAChB,6BACKG,GAAU,oCAAUX,EAAIE,MACxBiD,EAAOpD,KAAI,SAACsD,EAAKpD,GAAN,OAAc,uBAAGK,IAAKL,GAAMoD,MACvC1C,GAAW,kBAAC,EAAD,CAAS2B,aApBf,SAAAtC,GACdc,IAAMwC,IAAN,yCAA4C7C,GAAMT,GAC7CgB,MAAK,SAAAC,GAAG,OAAImB,YAAS,QACrBmB,OAAM,SAAAF,GAGH,IAFA,IAAMG,EAAgBH,EAAII,SAASvC,KAAKiC,OAClCO,EAAW,GACjB,MAAiBC,OAAOC,KAAKJ,GAA7B,eAA4C,CAAxC,IAAMlD,EAAG,KACToD,EAASG,KAAKL,EAAclD,GAAKwD,SAErCV,EAAUM,GACV/B,QAAQC,IAAIyB,OAUkChB,oBAAqBrC,OClCpE,aACX,IADiB,EAOOO,mBAAS,IAPhB,mBAOVT,EAPU,KAOJY,EAPI,OAQWH,mBAAS,IARpB,mBAQV4C,EARU,KAQFC,EARE,KAUjBvC,qBAAU,WACNC,IAAMC,IAAI,kCACLC,MAAK,SAAAC,GACFP,EAAQO,EAAIC,KAAKpB,WAE1B,IAmBH,OACI,6BACI,kBAAC,EAAD,CAAQU,OAAQ,WAChB,yCACC2C,EAAOpD,KAAI,SAACsD,EAAKpD,GAAN,OAAc,uBAAGK,IAAKL,GAAMoD,MACxC,kBAAC,EAAD,CAASf,aAtBC,SAAAtC,GACdc,IAAMiD,KAAK,qCAAsC/D,GAC5CgB,MAAK,SAAAC,GACFU,QAAQC,IAAIX,GACZP,EAAQ,GAAD,mBAAKZ,GAAL,CAAWmB,EAAIC,WAEzBqC,OAAM,SAAAF,GAGH,IAFA,IAAMG,EAAgBH,EAAII,SAASvC,KAAKiC,OAClCO,EAAW,GACjB,MAAiBC,OAAOC,KAAKJ,GAA7B,eAA4C,CAAxC,IAAMlD,EAAG,KACToD,EAASG,KAAKL,EAAclD,GAAKwD,SAErCV,EAAUM,GACV/B,QAAQC,IAAIyB,OASkBhB,oBAtCd,CACxBnC,KAAM,GACNC,KAAM,GACN4B,YAAa,GACbC,OAAQ,CAAC,GAAI,GAAI,SCWVgC,MAbf,WACE,OACI,yBAAKlC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAMmC,KAAM,MACZ,kBAACC,EAAD,CAAQD,KAAM,cACd,kBAAC,EAAD,CAAQA,KAAM,cACd,kBAACE,EAAD,CAAQF,KAAM,sBCHJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLxD,QAAQwD,MAAMA,EAAMrB,c","file":"static/js/main.1e08c094.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from '@reach/router';\n\nexport default (props) => {\n    const { removeFromDom } = props;\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Type</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {props.pets.map((pet, idx)=>{\n                        return (\n                            <tr>\n                                <td>{pet.name}</td>\n                                <td>{pet.type}</td>\n                                <td>\n                                    <Link to={`/pets/${pet._id}`} key={idx}>Details </Link>\n                                    <Link to={`/pets/edit/${pet._id}`}>Edit</Link>\n                                    <br/>\n                                </td>\n\n                            </tr>\n                        )\n                    }\n                )}\n            </tbody>\n        </table>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport {Link} from \"@reach/router\";\nimport './Header.css'\n\nexport default (props) => {\n    const [source, setSource] = useState(props.source)\n    return (\n        <div id={\"header\"}>\n            <h1>Pet Shelter</h1>\n            {source === \"main\"\n                ? <Link to={\"/pets/new\"}>add a pet to the shelter</Link>\n                : <Link to={\"/\"}>back to home</Link>\n            }\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport PetList from \"../components/PetList/PetList\";\nimport Header from \"../components/Header/Header\";\nimport './styles/Main.css'\n\nexport default () => {\n    const [pets, setPets] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() =>{\n        axios.get('http://localhost:8000/api/pets')\n            .then(res => {\n                setPets(res.data.pets);\n                setLoaded(true);\n            });\n    }, [])\n\n    const removeFromDom = petID => {\n        setPets(pets.filter(pet => pet._id !== petID))\n    }\n\n    return (\n        <div id={\"main\"}>\n            <Header source={\"main\"} />\n            <div id={\"petList\"}>\n                {loaded && <PetList pets={pets} removeFromDom={removeFromDom}/>}\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport axios from 'axios';\n\nexport default props => {\n    const { petId, successCallback } = props;\n    const deletePet = e => {\n        axios.delete(`http://localhost:8000/api/pets/${petId}`)\n            .then(res=>{\n                console.log(res);\n                successCallback();\n            })\n    }\n    return (\n        <button onClick={deletePet}>\n            Adopt Pet\n        </button>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Link, navigate } from \"@reach/router\";\nimport DeleteButton from \"../components/DeleteButton/DeleteButton\";\nimport Header from \"../components/Header/Header\";\nimport './styles/Detail.css'\n\nexport default (props) => {\n    const [pet, setPet] = useState({})\n    const [loaded, setLoaded] = useState(false)\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pets/${props.id}`)\n            .then(res => {\n                setPet(res.data)\n                setLoaded(true);\n            });\n    }, []);\n    return(\n        <div>\n            <Header source={\"detail\"} />\n            <h2>Details about: {pet.name}</h2>\n            <div id={\"large-container\"}>\n                <div id={\"medium-container\"}>\n                    <div className={\"container\"} id={\"type-container\"}>\n                        <p className={\"columns\"}>Pet type: </p>\n                        <p className={\"columns\"}>{pet.type}</p>\n                    </div>\n                    <div className={\"container\"} id={\"description-container\"}>\n                        <p className={\"columns\"}>Description: </p>\n                        <p className={\"columns\"}>{pet.description}</p>\n                    </div>\n                    <div className={\"container\"} id={\"skills-container\"}>\n                        <p className={\"columns\"}>Skills: </p>\n                        <div className={\"columns\"}>\n                            {loaded && pet.skills.map((skill, idx) => {\n                                return(\n                                    <p key={idx}>{skill}</p>\n                                )\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <Link to={`/pets/edit/${pet._id}`}>\n                Edit\n            </Link>\n            <br/>\n            <DeleteButton petName={pet.name} petId={pet._id} successCallback={() => navigate('/')} />\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport './PetForm.css'\n\nexport default (props) => {\n    const { initialSettingsProp, onSubmitProp } = props;\n    const [name, setName] = useState(initialSettingsProp.name);\n    const [type, setType] = useState(initialSettingsProp.type);\n    const [description, setDescription] = useState(initialSettingsProp.description);\n    const [skills, setSkills] = useState(initialSettingsProp.skills);\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        onSubmitProp({name, type, description, skills});\n    }\n\n    const onSkillsInputChange = (e, idx) => {\n        let tempSkills = [...skills];\n        tempSkills[idx] = e.target.value;\n        setSkills(tempSkills);\n    }\n\n    return (\n        <form onSubmit={onSubmitHandler}>\n            <div id={\"inputs\"}>\n                <div className={\"column\"}>\n                    <p id={\"name-label-input\"}>\n                        <label>Name</label><br/>\n                        <input type=\"text\" onChange = {(e) => setName(e.target.value)} value={name}/>\n                    </p>\n                    <p>\n                        <label>Type</label><br/>\n                        <input type=\"text\" step=\".01\" onChange = {(e) => setType(e.target.value)} value={type}/>\n                    </p>\n                    <p>\n                        <label>Description</label><br/>\n                        <input type=\"text\" onChange={(e) => setDescription(e.target.value)} value={description}/>\n                    </p>\n                </div>\n                <div className={\"column\"} id={\"skills-container\"}>\n                    <p>Skills (optional)</p>\n                    <p>\n                        <label>Skill 1:</label><br/>\n                        <input type=\"text\" onChange={(e) => onSkillsInputChange(e, 0)} value={skills[0]}/>\n                    </p>\n                    <p>\n                        <label>Skill 2:</label><br/>\n                        <input type=\"text\" onChange={(e) => onSkillsInputChange(e, 1)} value={skills[1]}/>\n                    </p>\n                    <p>\n                        <label>Skill 3:</label><br/>\n                        <input type=\"text\" onChange={(e) => onSkillsInputChange(e, 2)} value={skills[2]}/>\n                    </p>\n                </div>\n            </div>\n            <input type=\"submit\" />\n        </form>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport PetForm from \"../components/PetForm/PetForm\";\nimport Header from \"../components/Header/Header\";\nimport {navigate} from \"@reach/router\";\n\nexport default props => {\n    const { id } = props;\n    const [pet, setPet] = useState();\n    const [loaded, setLoaded] = useState(false)\n    const [errors, setErrors] = useState([]);\n\n    useEffect(() => {\n        axios.get(`http://localhost:8000/api/pets/${id}`)\n            .then(res => {\n                setPet(res.data);\n                setLoaded(true);\n            })\n    }, [])\n    const updatePet = pet => {\n        axios.put(`http://localhost:8000/api/pets/${id}`, pet)\n            .then(res => navigate('/'))\n            .catch(err=>{\n                const errorResponse = err.response.data.errors;\n                const errorArr = [];\n                for(const key of Object.keys(errorResponse)){\n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n                console.log(err)\n            })\n        \n    }\n    return (\n        <>\n            <Header source={\"update\"} />\n            <div>\n                {loaded && <h1>Edit {pet.name}</h1>}\n                {errors.map((err, idx) => <p key={idx}>{err}</p>)}\n                {loaded && (<PetForm onSubmitProp={updatePet} initialSettingsProp={pet}/>)}\n            </div>\n        </>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport PetForm from '../components/PetForm/PetForm';\nimport Header from \"../components/Header/Header\";\n\nexport default () => {\n    const initialFormSettings = {\n        name: \"\",\n        type: \"\",\n        description: \"\",\n        skills: [\"\", \"\", \"\"]\n    }\n    const [pets, setPets] = useState([]);\n    const [errors, setErrors] = useState([]);\n\n    useEffect(() =>{\n        axios.get('http://localhost:8000/api/pets')\n            .then(res => {\n                setPets(res.data.pets);\n            });\n    }, [])\n\n    const createPet = pet => {\n        axios.post('http://localhost:8000/api/pets/new', pet)\n            .then(res=>{\n                console.log(res)\n                setPets([...pets, res.data])\n            })\n            .catch(err=>{\n                const errorResponse = err.response.data.errors;\n                const errorArr = [];\n                for(const key of Object.keys(errorResponse)){\n                    errorArr.push(errorResponse[key].message)\n                }\n                setErrors(errorArr);\n                console.log(err)\n            })\n    }\n\n    return (\n        <div>\n            <Header source={\"create\"} />\n            <h1>Add a Pet</h1>\n            {errors.map((err, idx) => <p key={idx}>{err}</p>)}\n            <PetForm onSubmitProp={createPet} initialSettingsProp={initialFormSettings}/>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Main from \"./views/Main\";\nimport { Router } from '@reach/router';\nimport Detail from \"./views/Detail\";\nimport Update from \"./views/Update\";\nimport Create from \"./views/Create\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Router>\n          <Main path={\"/\"}/>\n          <Create path={\"/pets/new\"}/>\n          <Detail path={\"/pets/:id\"}/>\n          <Update path={\"/pets/edit/:id\"} />\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}